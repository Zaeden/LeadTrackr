generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  IN_PROGRESS
  COMPLETED
  LOST
}

enum LeadPriority {
  HIGH
  MEDIUM
  LOW
}

enum CourseLevel {
  BACHELORS
  DIPLOMA
  MASTERS
  DOCTORATE
}

enum LeadSource {
  WEBSITE
  REFERRAL
  EVENT
  ADVERTISEMENT
  PARTNER
  WALK_IN
  GOOGLE
  FACEBOOK
  INSTAGRAM
  YOUTUBE
  OTHER
}

enum ActivityAction {
  CREATED_LEAD
  UPDATED_LEAD
  DELETED_LEAD
  LOGGED_INTERACTION
}

enum InteractionType {
  CALL
  VIDEO_CALL
  WALK_IN
  EMAIL
  OTHER
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String?
  email      String   @unique
  phone      String
  password   String
  role       Role
  isActive   Boolean
  profilePic String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  //Relationships
  leads        Lead[] //assigned leads
  createdLeads Lead[] @relation("LeadCreator")

  activities      ActivityLog[]
  LeadUpdate      LeadUpdate[]
  InteractionLogs InteractionLog[]
  FollowUp        FollowUp[]
}

model Lead {
  id            Int          @id @default(autoincrement())
  firstName     String
  lastName      String?
  profilePic    String?
  email         String?      @unique
  phone         String       @unique
  gender        Gender
  dob           DateTime?
  courseId      Int?
  assignedTo    Int
  createdBy     Int
  status        LeadStatus
  isActive      Boolean
  source        LeadSource
  fatherName    String?
  fatherPhone   String?
  streetAddress String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  priority      LeadPriority
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  //Relationships
  course          Course?          @relation(fields: [courseId], references: [id])
  assignedUser    User             @relation(fields: [assignedTo], references: [id])
  createdByUser   User             @relation("LeadCreator", fields: [createdBy], references: [id])
  LeadUpdate      LeadUpdate[]
  InteractionLogs InteractionLog[]
  FollowUp        FollowUp[]
  LeadDocument    LeadDocument[]
}

model LeadDocument {
  id         Int      @id @default(autoincrement())
  leadId     Int
  fileName   String
  fileUrl    String
  uploadedAt DateTime @default(now())

  // Relationships
  lead Lead @relation(fields: [leadId], references: [id])
}

model LeadUpdate {
  id        Int        @id @default(autoincrement())
  leadId    Int
  userId    Int
  status    LeadStatus
  comments  String?
  createdAt DateTime   @default(now())

  // Relationships
  lead Lead @relation(fields: [leadId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Course {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  level     CourseLevel
  isActive  Boolean
  createdAt DateTime    @default(now())

  //Relationships
  leads Lead[]
}

model ActivityLog {
  id          Int            @id @default(autoincrement())
  userId      Int
  action      ActivityAction
  description String
  createdAt   DateTime       @default(now())

  //Relationships
  user User @relation(fields: [userId], references: [id])
}

model InteractionLog {
  id              Int             @id @default(autoincrement())
  leadId          Int
  interactionById Int
  interactionType InteractionType
  interactionTime DateTime        @default(now())
  notes           String?

  // Relationships
  lead          Lead @relation(fields: [leadId], references: [id])
  interactionBy User @relation(fields: [interactionById], references: [id])
}

model FollowUp {
  id           Int      @id @default(autoincrement())
  leadId       Int
  assignedToId Int
  followUpDate DateTime
  notes        String?
  isCompleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  lead       Lead @relation(fields: [leadId], references: [id])
  assignedTo User @relation(fields: [assignedToId], references: [id])
}
